#!/usr/bin/env sh
function short_branch_name() {
    BRANCH=`git rev-parse --abbrev-ref HEAD 2>/dev/null`
    if [ ! $BRANCH ]; then
        return $BRANCH
    fi
    if [[ $BRANCH =~ "/" ]]; then
        branch_type=$(echo $BRANCH | cut -c1)"/"
    fi
    name=`echo $BRANCH| cut -d "/" -f 2 | cut -d "-" -f 1,2,3`
    echo "${branch_type}${name}"
}

function git_info() {
  branch_name=''
  dirty_state=''
  if [[ -n $(short_branch_name) ]];then
    # Current branch
    branch_name=`short_branch_name`
    # Dirty state
    dirty_state=''
    if [[ $(git status 2> /dev/null | tail -n1) != "nothing to commit, working tree clean" ]]; then
      dirty_state=`echo -e " ±"`
    fi
    # Ahead/behind
    # status_branch=`$(git status -bs) | sed 's/\[([a-z]*) \d*\]/\1/g'`
    # Just in case do a git fetch dry run
    status_branch=$(git status -bs | awk '{print $3}' | cut -d '[' -f 2)
    ahead=''
    behind=''
    if [[ $status_branch == 'behind' ]]; then
      number_of_commits=$(git status -bs | awk '{print $3$4}' | cut -d '[' -f 2 | cut -d ']' -f 1 | cut -d 'd' -f 2)
      behind=" ↓ $number_of_commits"
    # elif [[ $status_branch == '' ]];then
    #   git fetch origin $(git rev-parse --abbrev-ref HEAD) --dry-run -n
    elif [[ $status_branch == 'ahead' ]]; then
      number_of_commits=$(git status -bs | awk '{print $3$4}' | cut -d '[' -f 2 | cut -d ']' -f 1 | cut -d 'd' -f 2)
      ahead=" ↑ $number_of_commits"
    fi
    # echo -e " \ue725 $branch_name$dirty_state$ahead$behind$(SEP3)"
    echo -e " \ue0a0 $branch_name$dirty_state$ahead$behind$(SEP3)"
  elif [[ $(short_branch_name) == '' ]];then
    echo $(short_branch_name)
  fi
}

function get_branches() {
    git branch -r | tail -n +2 | sed "s|^[^/]*/||" | sort
}

function prefix_commit_message() {
    _branch_type=$(git rev-parse --abbrev-ref HEAD 2>/dev/null| cut -d "/" -f 1)
    _ticket_name=$(git rev-parse --abbrev-ref HEAD 2>/dev/null| cut -d "/" -f 2 | cut -d "-" -f 1,2,3)
    jira_issue=$_ticket_name

    echo "[$_branch_type][${jira_issue%-*}]"
}

function fetchout() {
    branches_were=$(get_branches)
    git fetch
    branches_are=$(get_branches)

    mapfile -t choices < <(diff --old-line-format="" --unchanged-line-format="" <(echo "$branches_were") <(echo "$branches_are"))

    if [ ${#choices[@]} -eq 1 ]
    then
        git checkout "${choices[@]}"
        return 0
    elif (( ${#choices[@]} ))
    then
        echo
        select branch in "${choices[@]}"
        do
            git checkout "$branch"
            return 0
        done
    fi
}


function stm() {
  case $1 in
    -h | --help)
      echo "(S)SH (T)mux (M)anager - Not affiliated to the STM :P"
      echo "SSH to the Rodeo machine and attach to TMUX session"
      echo "options : "
      echo "-h, --help         Displays the help message and quits"
      ;;
    -t | --tmux-session)
      shift
      echo "Running : ssh -t vfleury@10.12.12.9 \"tmux at -t $1; bash --login\""
      ;;
    *)
      _host=$(echo -e "centos\nrocky" | fzf)
      echo $_host
      if [[ $_host == "centos" ]];then
        _host="mtl-vdi-wrk117l"
      else
        _host="mtl-vdi-wrk273l"
      fi
      echo "About to run : ssh -t vfleury@$_host"
      ssh -t vfleury@$_host "t; bash --login"
  esac
}


# Create a directory and cd into it directly
function mkdirr() {
  mkdir -p $1;
  cd $1;
}


# Checkout using fzf
function gco() {
  _fzf_git_each_ref --no-multi | xargs git checkout
}
